@model Umbraco.Forms.Mvc.Models.FieldViewModel
@{
    var values = new object[] { "", ""};
    if (Model.Values.Any())
    {
        values = Model.Values.ToArray();
    }

    var invalidMessage = "The values entered do not match";
    if (Model.AdditionalSettings.ContainsKey("ValidationErrorMessage"))
    {
        var message = Model.AdditionalSettings["ValidationErrorMessage"];
        if (!string.IsNullOrEmpty(Model.AdditionalSettings["ValidationErrorMessage"]) && !string.IsNullOrWhiteSpace(Model.AdditionalSettings["ValidationErrorMessage"]))
        {
            invalidMessage = message;
        }
    }

    var confirmId = string.Concat(Model.Id, "_confirm");
}
<input type="text" name="@Model.Name" id="@Model.Id" class="text" value="@values[0]" maxlength="500"
       @{if (string.IsNullOrEmpty(Model.PlaceholderText) == false) { <text> placeholder="@Model.PlaceholderText" </text>  }}
       @{if (Model.Mandatory || Model.Validate) { <text> data-val="true" </text>  }}
       @{if (Model.Mandatory) { <text> data-val-required="@Model.RequiredErrorMessage" </text>  }}
       @{if (Model.Validate) { <text> data-val-regex="@Model.InvalidErrorMessage" data-regex="@Html.Raw(Model.Regex)" </text>  }} />
<label>Confirm @Model.Caption</label>
<input type="text" name="@Model.Name" id="@confirmId" class="text" value="@values[0]" maxlength="500"
       @{if (string.IsNullOrEmpty(Model.PlaceholderText) == false) { <text> placeholder="Confirm @Model.PlaceholderText" </text> }}
       data-val="true"
       data-val-validateconfirminput="@invalidMessage"
       @{if (Model.Mandatory) { <text> data-val-required="@Model.RequiredErrorMessage" </text> }}
       @{if (Model.Validate) { <text> data-val-regex="@Model.InvalidErrorMessage" data-regex="@Html.Raw(Model.Regex)" </text> }} />